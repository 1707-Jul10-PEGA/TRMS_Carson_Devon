-- Carson and Devon
-- Project 1
-- Tuition Reimbursement Management System (TRMS) Database
-- 07-26-17


-- DROP DATABASE IF IT EXISTS
/*
DROP USER TRMS CASCADE;

-- CREATE DATABASE
CREATE USER TRMS
IDENTIFIED BY p4ssw0rd
DEFAULT TABLESPACE USERS
TEMPORARY TABLESPACE TEMP
QUOTA 10M ON users;

GRANT CONNECT TO TRMS;
GRANT RESOURCE TO TRMS;
GRANT CREATE SESSION TO TRMS;
GRANT CREATE TABLE TO TRMS;
GRANT CREATE VIEW TO TRMS;
GRANT CREATE JOB TO TRMS;
GRANT ALTER SESSION TO TRMS;



CONN TRMS/p4ssw0rd
*/

-- DROP TABLES
DROP TABLE CALENDAR;
DROP TABLE ATTACHMENT;
DROP TABLE BENCO;
DROP TABLE MESSAGE;
DROP TABLE EVENT;
DROP TABLE EVENT_TYPE;
DROP TABLE FILE_TYPE;
DROP TABLE GRADING_FORMAT;
DROP TABLE TRF;
DROP TABLE REIMBURSEMENT;
DROP TABLE EMPLOYEE;

-- CREATE TABLES

-- CURRENT DATE THAT CAN BE ALTERED
CREATE TABLE CALENDAR
(
    TODAY DATE DEFAULT SYSDATE
);

-- TABLE OF DIFFERENT EVENT TYPES WITH COVERAGE PERCENTAGES
CREATE TABLE EVENT_TYPE
(
    EVT_ID INTEGER PRIMARY KEY,
    TYPE VARCHAR(33) DEFAULT 'Other' NOT NULL,
    COVERAGE NUMBER(3,2) DEFAULT 0.30 NOT NULL
);

-- TABLE OF EMPLOYEES, WITH A UNIQUE REIMBURSEMENT ID, A DIRECT SUPERVISOR AS A DIFFERENT EMPLOYEE, AND A DEPARTMENT HEAD THAT CAN BE THE GIVEN EMPLOYEE
CREATE TABLE EMPLOYEE
(
    E_ID INTEGER PRIMARY KEY,
    FIRST_NAME VARCHAR(20) NOT NULL,
    LAST_NAME VARCHAR(20) NOT NULL,
    DS_ID INTEGER,
    DH_ID INTEGER,
    USERNAME VARCHAR(20) UNIQUE NOT NULL,
    PASSWORD VARCHAR(20) NOT NULL,
    CONSTRAINT FK_EMPLOYEE_DIRECT_SUPERVISOR FOREIGN KEY (DS_ID) REFERENCES EMPLOYEE(E_ID),
    CONSTRAINT FK_EMPLOYEE_DEPARTMENT_HEAD FOREIGN KEY (DH_ID) REFERENCES EMPLOYEE(E_ID),
    -- CHECK CONSTRAINT TO ENSURE THAT EMPLOYEE IS NOT OWN DIRECT SUPERVISOR
    CONSTRAINT CHK_EM_IS_NOT_OWN_DS CHECK (DS_ID != E_ID),
    CONSTRAINT CHK_EM_IS_NOT_OWN_DH CHECK (DH_ID != E_ID)
);

-- TABLE OF EMPLOYEES' RESPECTIVE REIMBURSEMENT VALUES
CREATE TABLE REIMBURSEMENT
(
    E_ID INTEGER PRIMARY KEY,
    AVAILABLE_REIMBURSEMENT NUMBER(6,2) DEFAULT 1000.00 NOT NULL,
    PENDING_REIMBURSEMENTS NUMBER(6,2) DEFAULT 0.00 NOT NULL,
    CONSTRAINT FK_REIMBURSEMENT_EMPLOYEE FOREIGN KEY (E_ID) REFERENCES EMPLOYEE(E_ID),
    -- CHECK CONSTRAINT FOR ALL REIMBURSEMENT VALUES TO NOT GO BELOW 0
    CONSTRAINT CHK_NONNEG CHECK (AVAILABLE_REIMBURSEMENT >= 0 AND PENDING_REIMBURSEMENTS >= 0)
);

-- TABLE OF BENCO EMPLOYEES
CREATE TABLE BENCO
(
    E_ID INTEGER PRIMARY KEY,
    UNCLAIMED_FORMS INTEGER DEFAULT 0,
    CONSTRAINT FK_BENCO_EMPLOYEE FOREIGN KEY (E_ID) REFERENCES EMPLOYEE(E_ID)
);

-- TABLE OF GRADING FORMATS WITH A DEFAULT PASSING GRADE OF 60%, WITHOUT A PRESENTATION
CREATE TABLE GRADING_FORMAT
(
    GF_ID INTEGER PRIMARY KEY,
    PASS_GRADE NUMBER(3,2) DEFAULT 0.60,
    PRESENTATION NUMBER(1) DEFAULT 0
);

-- TABLE OF EVENTS WITH A SPECIFIED EVENT TYPE AND GRADING FORMAT
CREATE TABLE EVENT
(
    EV_ID INTEGER PRIMARY KEY,
    START_DATE DATE NOT NULL,
    END_DATE DATE NOT NULL,
    LOC VARCHAR(50) NOT NULL,
    DESCRIPT VARCHAR(50) NOT NULL,
    EVENT_COST NUMBER(10,2) NOT NULL,
    EVT_ID INTEGER DEFAULT 6 NOT NULL,
    GF_ID INTEGER DEFAULT 1 NOT NULL,
    CONSTRAINT FK_EVENT_EVENT_TYPE FOREIGN KEY (EVT_ID) REFERENCES EVENT_TYPE(EVT_ID),
    CONSTRAINT FK_EVENT_GRADING_FORMAT FOREIGN KEY (GF_ID) REFERENCES GRADING_FORMAT(GF_ID),
    CONSTRAINT CHK_COST CHECK (EVENT_COST >= 0),
    CONSTRAINT CHK_DATES CHECK (END_DATE >= START_DATE)
);

-- TABLE OF TUITION REIMBURSEMENT FORMS, BELONGING TO ONE EMPLOYEE, ONE EVENT, ONE BENCO, THREE APPROVAL FLAGS, AND AN URGENCY FLAG
CREATE TABLE TRF
(
    TRF_ID INTEGER PRIMARY KEY,
    E_ID INTEGER NOT NULL,
    EV_ID INTEGER NOT NULL,
    BC_ID INTEGER,
    JUSTIFICATION VARCHAR2(100),
    OVER_AVAILABLE VARCHAR2(100),
    PROJECTED_REIMBURSEMENT NUMBER(10,2) DEFAULT 0,
    ACTUAL_REIMBURSEMENT NUMBER(10,2) DEFAULT 0,
    MISSED_TIME INTEGER,
    DS_APPROVED NUMBER(1) DEFAULT 0,
    DH_APPROVED NUMBER(1) DEFAULT 0,
    BC_APPROVED NUMBER(1) DEFAULT 0,
    E_APPROVED NUMBER(1) DEFAULT 1,
    ACTIVE NUMBER(1) DEFAULT 1,
    URGENT NUMBER(1) DEFAULT 0,
    GRADE VARCHAR(10) DEFAULT 'P',
    LAST_UPDATE DATE
);

-- TABLE OF MESSAGES FOR AN EMPLOYEE TO RECEIVE, INCLUDING A SENDER, AND MAY INCLUDE IN A FORM
CREATE TABLE MESSAGE
(
    ME_ID INTEGER PRIMARY KEY,
    E_ID INTEGER NOT NULL,
    S_ID INTEGER NOT NULL,
    TRF_ID INTEGER,
    EV_ID INTEGER,
    APPROVAL NUMBER(1),
    TITLE VARCHAR(100),
    CONT VARCHAR(100),
    FILENAME VARCHAR(100) NOT NULL,
    CONSTRAINT FK_MESSAGE_EMPLOYEE FOREIGN KEY (E_ID) REFERENCES EMPLOYEE(E_ID),
    CONSTRAINT FK_MESSAGE_SENDER FOREIGN KEY (S_ID) REFERENCES EMPLOYEE(E_ID),
    CONSTRAINT FK_MESSAGE_TRF FOREIGN KEY (TRF_ID) REFERENCES TRF(TRF_ID),
    CONSTRAINT FK_MESSAGE_EVENT FOREIGN KEY (EV_ID) REFERENCES EVENT(EV_ID)
 );

-- TABLE OF ALLOWED FILE TYPES OF AN ATTACHMENT
CREATE TABLE FILE_TYPE
(
    FT_ID INTEGER PRIMARY KEY,
    EXTENSION VARCHAR(4) UNIQUE NOT NULL,
    DESCRIPT VARCHAR(50)
);

-- TABLE OF ATTACHMENTS FOR AN EMPLOYEE TO INCLUDE IN A MESSAGE AND/OR IN A FORM
CREATE TABLE ATTACHMENT
(
    AT_ID INTEGER PRIMARY KEY,
    ME_ID INTEGER,
    TRF_ID INTEGER,
    FILENAME VARCHAR(100) NOT NULL,
    FT_ID INTEGER NOT NULL,
    CONT VARCHAR(100),
    CONSTRAINT FK_ATTACHMENT_MESSAGE FOREIGN KEY (ME_ID) REFERENCES MESSAGE (ME_ID),
    CONSTRAINT FK_ATTACHMENT_FORM FOREIGN KEY (TRF_ID) REFERENCES TRF (TRF_ID),
    CONSTRAINT FK_ATTACHMENT_FILE_TYPE FOREIGN KEY (FT_ID) REFERENCES FILE_TYPE(FT_ID)
);

-- CREATE SEQUENCES
DROP SEQUENCE EMPLOYEE_SEQUENCE;
DROP SEQUENCE ATTACHMENT_SEQUENCE;
DROP SEQUENCE MESSAGE_SEQUENCE;
DROP SEQUENCE TRF_SEQUENCE;
DROP SEQUENCE EVENT_SEQUENCE;
DROP SEQUENCE GRADING_FORMAT_SEQUENCE;
CREATE SEQUENCE EMPLOYEE_SEQUENCE MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1;
CREATE SEQUENCE ATTACHMENT_SEQUENCE MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1;
CREATE SEQUENCE MESSAGE_SEQUENCE MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1;
CREATE SEQUENCE TRF_SEQUENCE MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1;
CREATE SEQUENCE EVENT_SEQUENCE MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1;
CREATE SEQUENCE GRADING_FORMAT_SEQUENCE MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1;


-- CREATE TRIGGERS
CREATE OR REPLACE TRIGGER INSERT_ATTACHMENT_TRIGGER
    BEFORE INSERT
    ON ATTACHMENT
    FOR EACH ROW
    BEGIN
        IF :NEW.AT_ID IS NULL THEN
            SELECT ATTACHMENT_SEQUENCE.NEXTVAL INTO :NEW.AT_ID FROM DUAL;
        END IF;
END;
/

CREATE OR REPLACE TRIGGER INSERT_EMPLOYEE_TRIGGER
    BEFORE INSERT
    ON EMPLOYEE
    FOR EACH ROW
    BEGIN
        IF :NEW.E_ID IS NULL THEN
            SELECT EMPLOYEE_SEQUENCE.NEXTVAL INTO :NEW.E_ID FROM DUAL;
        END IF;
END;
/

CREATE OR REPLACE TRIGGER INSERT_REIMBURSEMENT_TRIGGER
    AFTER INSERT
    ON EMPLOYEE
    FOR EACH ROW
    BEGIN
        INSERT INTO REIMBURSEMENT (E_ID) VALUES (:NEW.E_ID);
END;
/

CREATE OR REPLACE TRIGGER INSERT_EVENT_TRIGGER
    BEFORE INSERT
    ON EVENT
    FOR EACH ROW
    BEGIN
        IF :NEW.EV_ID IS NULL THEN
            SELECT EVENT_SEQUENCE.NEXTVAL INTO :NEW.EV_ID FROM DUAL;
        END IF;
END;
/

CREATE OR REPLACE TRIGGER INSERT_GRADING_FORMAT_TRIGGER
    BEFORE INSERT
    ON GRADING_FORMAT
    FOR EACH ROW
    BEGIN
        IF :NEW.GF_ID IS NULL THEN
            SELECT GRADING_FORMAT_SEQUENCE.NEXTVAL INTO :NEW.GF_ID FROM DUAL;
        END IF;
END;
/

CREATE OR REPLACE TRIGGER INSERT_MESSAGE_TRIGGER
    BEFORE INSERT
    ON MESSAGE
    FOR EACH ROW
    BEGIN
        IF :NEW.ME_ID IS NULL THEN
            SELECT MESSAGE_SEQUENCE.NEXTVAL INTO :NEW.ME_ID FROM DUAL;
        END IF;
END;
/

CREATE OR REPLACE TRIGGER INSERT_TRF_TRIGGER
    BEFORE INSERT
    ON TRF
    FOR EACH ROW
    DECLARE
        EVENT_START DATE;
        DS INTEGER;
        DH INTEGER;
        DS_MESSAGE INTEGER;
        DH_MESSAGE INTEGER;
        CURR_DATE DATE;
    BEGIN
        IF :NEW.TRF_ID IS NULL THEN
            SELECT TRF_SEQUENCE.NEXTVAL INTO :NEW.TRF_ID FROM DUAL;
        END IF;
        SELECT DS_ID, DH_ID INTO DS, DH FROM EMPLOYEE WHERE EMPLOYEE.E_ID = :NEW.E_ID;
        -- GIVE NEW FORM TO THE BC WITH THE MOST AMOUNT OF UNCLAIMED FORMS
        IF (:NEW.BC_ID IS NULL) THEN
            UPDATE BENCO B SET B.UNCLAIMED_FORMS = (SELECT COUNT(TRF_ID) FROM TRF WHERE ACTIVE = 1 AND B.E_ID != BC_ID);
            SELECT B.E_ID INTO :NEW.BC_ID FROM BENCO B WHERE B.UNCLAIMED_FORMS = (SELECT MAX(B2.UNCLAIMED_FORMS) FROM BENCO B2 WHERE B2.E_ID != :NEW.E_ID AND B2.E_ID != DS AND B2.E_ID != DH);
            UPDATE BENCO B SET B.UNCLAIMED_FORMS = (SELECT COUNT(TRF_ID) FROM TRF WHERE ACTIVE = 1 AND B.E_ID != BC_ID);
        END IF;
        -- GIVE URGENT STATUS TO AN EVENT STARTING IN LESS THAN 2 WEEKS
        SELECT EV.START_DATE INTO EVENT_START FROM EVENT EV WHERE EV.EV_ID = :NEW.EV_ID;
        SELECT TODAY INTO CURR_DATE FROM CALENDAR;
        IF 14 > (EVENT_START - CURR_DATE) THEN
            :NEW.URGENT := 1;
        END IF;
        SELECT COUNT(M.ME_ID) INTO DS_MESSAGE FROM MESSAGE M WHERE M.EV_ID = :NEW.EV_ID AND M.E_ID = :NEW.E_ID AND M.S_ID = DS AND :NEW.E_ID != M.S_ID AND M.APPROVAL = 1 AND M.ME_ID IS NOT NULL;
        SELECT COUNT(M.ME_ID) INTO DH_MESSAGE FROM MESSAGE M WHERE M.EV_ID = :NEW.EV_ID AND M.E_ID = :NEW.E_ID AND M.S_ID = DH AND :NEW.E_ID != M.S_ID AND M.APPROVAL = 1 AND M.ME_ID IS NOT NULL;
        IF DS_MESSAGE > 0 THEN
            :NEW.DS_APPROVED := 1;
        END IF;
        IF DH_MESSAGE > 0 THEN
            :NEW.DH_APPROVED := 1;
        :NEW.LAST_UPDATE := CURR_DATE;
        END IF;
END;
/

-- UPDATES THE TRF IF A MESSAGE IS SENT TO THE EMPLOYEE EXPRESSING APPROVAL
CREATE OR REPLACE TRIGGER APPROVAL_MESSAGE_TRIGGER
    BEFORE INSERT
    ON MESSAGE
    FOR EACH ROW
    DECLARE
        DS INTEGER;
        DH INTEGER;
        BC INTEGER;
        RECIPIENT INTEGER;
        SENDER INTEGER;
        RELEVANT_FORM INTEGER;
        ACTIVE INTEGER;
        CURR_DATE DATE;
    BEGIN
    IF (:NEW.TRF_ID IS NOT NULL) THEN
        SELECT TODAY INTO CURR_DATE FROM CALENDAR;
        SELECT TRF_ID, BC_ID, ACTIVE INTO RELEVANT_FORM, BC, ACTIVE FROM TRF WHERE TRF.TRF_ID = :NEW.TRF_ID AND TRF.E_ID = :NEW.E_ID;
        IF (RELEVANT_FORM IS NOT NULL) THEN
            UPDATE TRF SET TRF.LAST_UPDATE = CURR_DATE WHERE TRF.TRF_ID = RELEVANT_FORM;
        END IF;
        IF (:NEW.APPROVAL = 1 AND RELEVANT_FORM IS NOT NULL AND ACTIVE = 1) THEN
            RECIPIENT := :NEW.E_ID;
            SENDER := :NEW.S_ID;
            IF SENDER != RECIPIENT THEN
                SELECT DS_ID, DH_ID INTO DS, DH FROM EMPLOYEE WHERE EMPLOYEE.E_ID = RECIPIENT;
                DBMS_OUTPUT.PUT_LINE(BC);
                IF SENDER = DS THEN
                    UPDATE TRF SET DS_APPROVED = 1 WHERE TRF.TRF_ID = :NEW.TRF_ID;
                END IF;
                IF SENDER = DH THEN
                    UPDATE TRF SET DH_APPROVED = 1 WHERE TRF.TRF_ID = :NEW.TRF_ID;
                END IF;
                IF SENDER = BC THEN
                    UPDATE TRF SET BC_APPROVED = 1 WHERE TRF.TRF_ID = :NEW.TRF_ID;
                END IF;
            END IF;
        END IF;
        -- REJECT FORM AND CLOSE IT
        IF (:NEW.APPROVAL = 2 AND RELEVANT_FORM IS NOT NULL) THEN
            RECIPIENT := :NEW.E_ID;
            SENDER := :NEW.S_ID;
            IF SENDER != RECIPIENT THEN
                SELECT DS_ID, DH_ID INTO DS, DH FROM EMPLOYEE WHERE EMPLOYEE.E_ID = RECIPIENT;
                IF ((SENDER = DS) OR (SENDER = DH) OR (SENDER = BC)) THEN
                    UPDATE TRF SET TRF.ACTIVE = 0 WHERE TRF.TRF_ID = RELEVANT_FORM;
                    UPDATE REIMBURSEMENT R SET R.PENDING_REIMBURSEMENTS = (SELECT R2.PENDING_REIMBURSEMENTS FROM REIMBURSEMENT R2 WHERE R2.E_ID = R.E_ID) - (SELECT ACTUAL_REIMBURSEMENT FROM TRF WHERE TRF.TRF_ID = RELEVANT_FORM) WHERE R.E_ID = RECIPIENT;
                    UPDATE REIMBURSEMENT R SET R.AVAILABLE_REIMBURSEMENT = (SELECT R2.AVAILABLE_REIMBURSEMENT FROM REIMBURSEMENT R2 WHERE R2.E_ID = R.E_ID) + (SELECT ACTUAL_REIMBURSEMENT FROM TRF WHERE TRF.TRF_ID = RELEVANT_FORM) WHERE R.E_ID = RECIPIENT;
                END IF;
                IF SENDER = DH THEN
                    UPDATE TRF SET DH_APPROVED = 1;
                END IF;
                IF SENDER = BC THEN
                    UPDATE TRF SET BC_APPROVED = 1;
                END IF;
            END IF;
        END IF;
    END IF;
END;
/


CREATE OR REPLACE TRIGGER CALCULATE_PROJECTED_TRIGGER
    BEFORE INSERT
    ON TRF
    FOR EACH ROW
    DECLARE
        EV_COST NUMBER;
        EVT_COVERAGE NUMBER;
        R_AVAILABLE NUMBER;
        R_PENDING NUMBER;
    BEGIN
        SELECT EV.EVENT_COST, EVT.COVERAGE INTO EV_COST, EVT_COVERAGE FROM EVENT EV, EVENT_TYPE EVT WHERE EV.EV_ID = :NEW.EV_ID AND EV.EVT_ID = EVT.EVT_ID;
        SELECT AVAILABLE_REIMBURSEMENT, PENDING_REIMBURSEMENTS INTO R_AVAILABLE, R_PENDING FROM REIMBURSEMENT R WHERE R.E_ID = :NEW.E_ID;
        :NEW.PROJECTED_REIMBURSEMENT := EV_COST * EVT_COVERAGE;
        IF (:NEW.PROJECTED_REIMBURSEMENT > R_AVAILABLE) THEN
            :NEW.PROJECTED_REIMBURSEMENT := R_AVAILABLE;
        END IF;
        :NEW.ACTUAL_REIMBURSEMENT := :NEW.PROJECTED_REIMBURSEMENT;
        R_PENDING := R_PENDING + :NEW.ACTUAL_REIMBURSEMENT;
        R_AVAILABLE := R_AVAILABLE - :NEW.ACTUAL_REIMBURSEMENT;
        UPDATE REIMBURSEMENT R SET R.PENDING_REIMBURSEMENTS = R_PENDING WHERE R.E_ID = :NEW.E_ID;
        UPDATE REIMBURSEMENT R SET R.AVAILABLE_REIMBURSEMENT = R_AVAILABLE WHERE R.E_ID = :NEW.E_ID;
    END;
/

-- ANNUALLY RESET TOTAL REIMBURSEMENTS TO $1000.00, NOT INCLUDING ANY PENDING REIMBURSEMENTS
CREATE OR REPLACE TRIGGER ANNUAL_RESET_TRIGGER
    AFTER UPDATE
    ON CALENDAR
    FOR EACH ROW
    DECLARE
        THIS_YEAR INT;
        NEXT_YEAR INT;
    BEGIN
        THIS_YEAR := EXTRACT(YEAR FROM :OLD.TODAY);
        NEXT_YEAR := EXTRACT(YEAR FROM :NEW.TODAY);
        IF (NEXT_YEAR > THIS_YEAR) THEN
            UPDATE REIMBURSEMENT R SET R.AVAILABLE_REIMBURSEMENT = 1000.00 - (SELECT PENDING_REIMBURSEMENTS FROM REIMBURSEMENT R2 WHERE R.E_ID = R2.E_ID);
        END IF;
END;
/

-- POPULATE THE TABLES


-- SIX EVENT TYPES
INSERT INTO EVENT_TYPE VALUES (1, 'University Courses', 0.80);
INSERT INTO EVENT_TYPE VALUES (2, 'Seminars', 0.60);
INSERT INTO EVENT_TYPE VALUES (3, 'Certification Preparation Classes', 0.75);
INSERT INTO EVENT_TYPE VALUES (4, 'Certification', 1.00);
INSERT INTO EVENT_TYPE VALUES (5, 'Technical Training', 0.90);
INSERT INTO EVENT_TYPE VALUES (6, 'Other', 0.30);

-- FIVE FILE TYPES
INSERT INTO FILE_TYPE VALUES (1, 'pdf', 'Portable Document Format File');
INSERT INTO FILE_TYPE VALUES (2, 'png', 'Portable Network Graphics Image File');
INSERT INTO FILE_TYPE VALUES (3, 'jpeg', 'Joint Photographic Experts Group Image File');
INSERT INTO FILE_TYPE VALUES (4, 'txt', 'Text File');
INSERT INTO FILE_TYPE VALUES (5, 'doc', 'Document File');

-- DEFAULT GRADING_FORMAT
INSERT INTO GRADING_FORMAT VALUES (1, 0.60, 0);

-- DEFAULT TODAY DATE
INSERT INTO CALENDAR VALUES (SYSDATE);

INSERT INTO EVENT (START_DATE, END_DATE, LOC, DESCRIPT, EVENT_COST) VALUES ('29-JUL-17', '30-JUL-17', 'Test location', 'This is an urgent event', 2000.23);
INSERT INTO EMPLOYEE (FIRST_NAME, LAST_NAME, USERNAME, PASSWORD) VALUES ('Department', 'Head', 'dh', 'pass');
INSERT INTO EMPLOYEE (FIRST_NAME, LAST_NAME, DS_ID, DH_ID, USERNAME, PASSWORD) VALUES ('Direct', 'Supervisor', 1, 1, 'ds', 'pass');
INSERT INTO EMPLOYEE (FIRST_NAME, LAST_NAME, DS_ID, DH_ID, USERNAME, PASSWORD) VALUES ('Ben', 'Co', 2, 1, 'bc', 'pass');
INSERT INTO BENCO (E_ID) VALUES (3);
INSERT INTO EMPLOYEE (FIRST_NAME, LAST_NAME, DS_ID, DH_ID, USERNAME, PASSWORD) VALUES ('Carson', 'Stephens', 2, 1, 'cs', 'pass');
INSERT INTO MESSAGE (E_ID, S_ID, EV_ID, APPROVAL, TITLE, CONT, FILENAME) VALUES (4, 1, 1, 1, 'Test prior DH approval', 'This is a test for prior DH approval', 'Prior_DH_Test.msg');
INSERT INTO TRF (E_ID, EV_ID, BC_ID, JUSTIFICATION) VALUES (4, 1, 3, 'This is a test TRF');
INSERT INTO ATTACHMENT (TRF_ID, FILENAME, FT_ID, CONT) VALUES (1, 'Test_Attachment', 3, 'This is a test attachment');
INSERT INTO ATTACHMENT (TRF_ID, FILENAME, FT_ID, CONT) VALUES (1, 'Test_Attachment', 4, 'This is also a test attachment');
INSERT INTO MESSAGE (E_ID, S_ID, TRF_ID, APPROVAL, TITLE, CONT, FILENAME) VALUES (4, 2, 1, 1, 'Test post DS approval', 'This is a test for post DS approval', 'Post_DS_Test.msg');
INSERT INTO MESSAGE (E_ID, S_ID, TRF_ID, APPROVAL, TITLE, CONT, FILENAME) VALUES (4, 2, 1, 2, 'Test post BC rejection', 'This is a test for post DS rejection', 'Post_BC_Reject_Test.msg');
INSERT INTO TRF (E_ID, EV_ID, BC_ID, JUSTIFICATION) VALUES (4, 1, 3, 'This is another test TRF');
COMMIT;

EXIT;