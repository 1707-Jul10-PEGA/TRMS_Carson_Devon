-- Carson and Devon
-- Project 1
-- Tuition Reimbursement Management System (TRMS) Database
-- 07-26-17


-- DROP DATABASE IF IT EXISTS
DROP USER TRMS CASCADE;

-- CREATE DATABASE
CREATE USER TRMS
IDENTIFIED BY p4ssw0rd
DEFAULT TABLESPACE USERS
TEMPORARY TABLESPACE TEMP
QUOTA 10M ON users;

GRANT CONNECT TO TRMS;
GRANT RESOURCE TO TRMS;
GRANT CREATE SESSION TO TRMS;
GRANT CREATE TABLE TO TRMS;
GRANT CREATE VIEW TO TRMS;



CONN TRMS/p4ssw0rd

-- CREATE TABLES

-- TABLE OF EMPLOYEES' RESPECTIVE REIMBURSEMENT VALUES
CREATE TABLE REIMBURSEMENT
(
    R_ID INTEGER PRIMARY KEY,
    AVAILABLE_REIMBURSEMENT NUMBER(6,2) DEFAULT 1000.00 NOT NULL,
    PENDING_REIMBURSEMENTS NUMBER(6,2) DEFAULT 0.00 NOT NULL,
    AWARDED_REIMBURSEMENTS NUMBER(6,2) DEFAULT 0.00 NOT NULL,
    -- CHECK CONSTRAINT FOR ALL REIMBURSEMENT VALUES TO NOT GO BELOW 0
    CONSTRAINT CHK_NONNEG CHECK (AVAILABLE_REIMBURSEMENT >= 0 AND PENDING_REIMBURSEMENTS >= 0 AND AWARDED_REIMBURSEMENTS >= 0)
);

-- TABLE OF DIFFERENT EVENT TYPES WITH COVERAGE PERCENTAGES
CREATE TABLE EVENT_TYPE
(
    EVT_ID INTEGER PRIMARY KEY,
    TYPE VARCHAR(33) DEFAULT 'Other' NOT NULL,
    COVERAGE NUMBER(3,2) DEFAULT 0.30 NOT NULL
);

-- TABLE OF EMPLOYEES, WITH A UNIQUE REIMBURSEMENT ID, A DIRECT SUPERVISOR AS A DIFFERENT EMPLOYEE, AND A DEPARTMENT HEAD THAT CAN BE THE GIVEN EMPLOYEE
CREATE TABLE EMPLOYEE
(
    E_ID INTEGER PRIMARY KEY,
    FIRST_NAME VARCHAR(20) NOT NULL,
    LAST_NAME VARCHAR(20) NOT NULL,
    R_ID INTEGER UNIQUE NOT NULL,
    DS_ID INTEGER NOT NULL,
    DH_ID INTEGER NOT NULL,
    CONSTRAINT FK_EMPLOYEE_REIMBURSEMENT FOREIGN KEY (R_ID) REFERENCES REIMBURSEMENT(R_ID),
    CONSTRAINT FK_EMPLOYEE_DIRECT_SUPERVISOR FOREIGN KEY (DS_ID) REFERENCES EMPLOYEE(E_ID),
    CONSTRAINT FK_EMPLOYEE_DEPARTMENT_HEAD FOREIGN KEY (DH_ID) REFERENCES EMPLOYEE(E_ID),
    -- CHECK CONSTRAINT TO ENSURE THAT EMPLOYEE IS NOT OWN DIRECT SUPERVISOR
    CONSTRAINT CHK_EM_IS_NOT_OWN_DS CHECK (DS_ID != E_ID)
);

-- TABLE OF BENCO EMPLOYEES
CREATE TABLE BENCO
(
    E_ID INTEGER PRIMARY KEY,
    CONSTRAINT FK_BENCO_EMPLOYEE FOREIGN KEY (E_ID) REFERENCES EMPLOYEE(E_ID)
);

-- TABLE OF GRADING FORMATS WITH A DEFAULT PASSING GRADE OF 60%, WITHOUT A PRESENTATION
CREATE TABLE GRADING_FORMAT
(
    GF_ID INTEGER PRIMARY KEY,
    PASS_GRADE NUMBER(3,2) DEFAULT 0.60,
    PRESENTATION NUMBER(1) DEFAULT 0
);

-- TABLE OF EVENTS WITH A SPECIFIED EVENT TYPE AND GRADING FORMAT
CREATE TABLE EVENT
(
    EV_ID INTEGER PRIMARY KEY,
    START_DATE DATE NOT NULL,
    END_DATE DATE NOT NULL,
    LOC VARCHAR(50) NOT NULL,
    DESCRIPT VARCHAR(50) NOT NULL,
    EVENT_COST NUMBER(10,2) NOT NULL,
    EVT_ID INTEGER NOT NULL,
    GF_ID INTEGER NOT NULL,
    CONSTRAINT FK_EVENT_EVENT_TYPE FOREIGN KEY (EVT_ID) REFERENCES EVENT_TYPE(EVT_ID),
    CONSTRAINT FK_EVENT_GRADING_FORMAT FOREIGN KEY (GF_ID) REFERENCES GRADING_FORMAT(GF_ID),
    CONSTRAINT CHK_COST CHECK (EVENT_COST >= 0),
    CONSTRAINT CHK_DATES CHECK (END_DATE >= START_DATE)
);

-- TABLE OF TUITION REIMBURSEMENT FORMS, BELONGING TO ONE EMPLOYEE, ONE EVENT, ONE BENCO, THREE APPROVAL FLAGS, AND AN URGENCY FLAG
CREATE TABLE TRF
(
    TRF_ID INTEGER PRIMARY KEY,
    E_ID INTEGER NOT NULL,
    EV_ID INTEGER NOT NULL,
    BC_ID INTEGER NOT NULL,
    JUSTIFICATION VARCHAR(100),
    PROJECTED_REIMBURSEMENT NUMBER(10,2),
    ACTUAL_REIMBURSEMENT NUMBER(10,2),
    MISSED_TIME NUMBER,
    DS_APPROVED NUMBER(1),
    DH_APPROVED NUMBER(1),
    BC_APPROVED NUMBER(1),
    URGENT NUMBER(1)
);

-- TABLE OF MESSAGES FOR AN EMPLOYEE TO RECEIVE, INCLUDING A SENDER, AND MAY INCLUDE IN A FORM
CREATE TABLE MESSAGE
(
    ME_ID INTEGER PRIMARY KEY,
    E_ID INTEGER NOT NULL,
    S_ID INTEGER NOT NULL,
    TITLE VARCHAR(100),
    CONT VARCHAR(100),
    FILENAME VARCHAR(100) NOT NULL,
    CONSTRAINT FK_MESSAGE_EMPLOYEE FOREIGN KEY (E_ID) REFERENCES EMPLOYEE(E_ID),
    CONSTRAINT FK_MESSAGE_SENDER FOREIGN KEY (S_ID) REFERENCES EMPLOYEE(E_ID)
);

-- TABLE OF ALLOWED FILE TYPES OF AN ATTACHMENT
CREATE TABLE FILE_TYPE
(
    FT_ID INTEGER PRIMARY KEY,
    EXTENSION VARCHAR(4) UNIQUE NOT NULL,
    DESCRIPT VARCHAR(50)
);

-- TABLE OF ATTACHMENTS FOR AN EMPLOYEE TO INCLUDE IN A MESSAGE AND/OR IN A FORM
CREATE TABLE ATTACHMENT
(
    AT_ID INTEGER PRIMARY KEY,
    ME_ID INTEGER,
    TRF_ID INTEGER,
    FILENAME VARCHAR(100) NOT NULL,
    FT_ID INTEGER NOT NULL,
    CONT VARCHAR(100),
    CONSTRAINT FK_ATTACHMENT_MESSAGE FOREIGN KEY (ME_ID) REFERENCES MESSAGE (ME_ID),
    CONSTRAINT FK_ATTACHMENT_FORM FOREIGN KEY (TRF_ID) REFERENCES TRF (TRF_ID),
    CONSTRAINT FK_ATTACHMENT_FILE_TYPE FOREIGN KEY (FT_ID) REFERENCES FILE_TYPE(FT_ID)
);

-- CREATE TRIGGERS

-- CALCULATES THE AVAILABLE REIMBURSEMENT WHENEVER AN UPDATE IS MADE
CREATE OR REPLACE TRIGGER CALC_AVAILABLE_TRIGGER
    AFTER UPDATE
    ON REIMBURSEMENT
    FOR EACH ROW
    BEGIN
        UPDATE REIMBURSEMENT SET AVAILABLE_REIMBURSEMENT = (1000.00 - PENDING_REIMBURSEMENTS - AWARDED_REIMBURSEMENTS);
    END;
/

-- PREVENTS A DUPLICATE GRADING FORMAT
CREATE OR REPLACE TRIGGER DUPLICATE_GRADING_FORMAT
    BEFORE INSERT OR UPDATE ON GRADING_FORMAT
    FOR EACH ROW
    DECLARE
        V_DUP NUMBER;
    BEGIN
        SELECT COUNT(GF_ID) INTO V_DUP FROM GRADING_FORMAT WHERE PASS_GRADE = :NEW.PASS_GRADE AND PRESENTATION = :NEW.PRESENTATION;
        IF V_DUP > 0 THEN
            RAISE_APPLICATION_ERROR (-20100, 'This grading format already exists. The insert is cancelled.');
        END IF;
END;
/

-- CREATE PROCEDURE TO ANNUALLY RESET TOTALREIMBURSEMENT TO $1000.00
CREATE OR REPLACE PROCEDURE ANNUAL_RESET_PROCEDURE
    AS
    BEGIN
        DBMS_SCHEDULER.CREATE_JOB(
            JOB_NAME => 'ANNUAL RESET',
            JOB_TYPE => 'PLSQL_BLOCK',
            JOB_ACTION => '
                BEGIN
                    UPDATE REIMBURSEMENT
                        SET AVAILABLE_REIMBURSEMENT = 1000.00, AWARDED_REIMBURSEMENTS = 0.00;
                END;',
            START_DATE => SYSTIMESTAMP,
            REPEAT_INTERVAL => 'BYYEARDAY=1;BYHOUR=0;BYMINUTE=0;BYSECOND=0;',
            ENABLED => TRUE);
END;
/


-- POPULATE THE TABLES

-- SIX EVENT TYPES
INSERT INTO EVENT_TYPE VALUES (1, 'University Courses', 0.80);
INSERT INTO EVENT_TYPE VALUES (2, 'Seminars', 0.60);
INSERT INTO EVENT_TYPE VALUES (3, 'Certification Preparation Classes', 0.75);
INSERT INTO EVENT_TYPE VALUES (4, 'Certification', 1.00);
INSERT INTO EVENT_TYPE VALUES (5, 'Technical Training', 0.90);
INSERT INTO EVENT_TYPE VALUES (6, 'Other', 0.30);

-- FIVE FILE TYPES
INSERT INTO FILE_TYPE VALUES (1, 'pdf', 'Portable Document Format File');
INSERT INTO FILE_TYPE VALUES (2, 'png', 'Portable Network Graphics Image File');
INSERT INTO FILE_TYPE VALUES (3, 'jpeg', 'Joint Photographic Experts Group Image File');
INSERT INTO FILE_TYPE VALUES (4, 'txt', 'Text File');
INSERT INTO FILE_TYPE VALUES (5, 'doc', 'Document File');